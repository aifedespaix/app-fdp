# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type ArticleType {
  author: UserType!
  category: CategoryType!
  comments: [CommentType!]
  content: String!
  createdAt: DateTime!
  description: String!
  id: ID!
  likes: [LikeType!]
  published: Boolean!
  tags: [TagType!]
  thumbnail: PictureType!
  title: String!
  updatedAt: DateTime!
}

type BoxType {
  author: UserType!
  comments: [CommentType]!
  createdAt: DateTime!
  description: String!
  id: ID!
  likes: [LikeType]!
  sound: ResourceType!
  tags: [TagType]!
  thumbnail: PictureType!
  title: String!
  updatedAt: DateTime!
}

type CategoryType {
  createdAt: DateTime!
  description: String!
  id: ID!
  name: String!
  picture: PictureType!
  updatedAt: DateTime!
}

type CommentType {
  author: UserType!
  childCommentTypes: [CommentType!]!
  childs: [CommentType!]!
  createdAt: DateTime!
  id: ID!
  isParent: Boolean!
  likes: [LikeType!]!
  parentCommentType: CommentType!
  updatedAt: DateTime!
  value: String!
}

type ImageType {
  height: Int!
  id: ID!
  mimetype: String!
  url: String!
  width: Int!
}

type LikeType {
  author: UserType!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  value: LikeEnum!
}

type LoginType {
  token: String!
  user: UserType!
}

type MenuItemType {
  createdAt: DateTime!
  icon: String!
  id: ID!
  name: String!
  routerLink: String!
  updatedAt: DateTime!
}

type MenuType {
  createdAt: DateTime!
  id: ID!
  items: [MenuItemType!]
  name: String!
  updatedAt: DateTime!
}

type Mutation {
  addItem(item: MenuItemInput!, name: String!): MenuType!
  authAifedespaix(secret: String!): LoginType!
  authLogin(login: LoginInput!): LoginType!
  authRegister(data: RegisterInput!): LoginType!
  changeLike(like: String!, likeId: String!): Boolean!
  createArticle(article: ArticleInput!): ArticleType!
  createArticleComment(articleId: String!, comment: String!): ArticleType!
  createArticleLike(articleId: String!, like: String!): ArticleType!
  createBox(data: BoxInput!): BoxType!
  createBoxComment(boxId: String!, comment: String!): ArticleType!
  createBoxLike(boxId: String!, like: String!): BoxType!
  createCategory(category: CategoryInput!): CategoryType!
  createCommentAnswer(comment: String!, parentId: String!): CommentType!
  createCommentLike(commentId: String!, like: String!): CommentType!
  createMenu(menu: MenuInput!): MenuType!
  createPicture(file: Upload!, picture: PictureInput!): PictureType!
  createResourceAudio(resource: ResourceAudioInput!): ResourceType!
  deleteUser(id: String!): UserType!
  editMyUser(user: UserEditInput!): UserType!
  updateArticle(article: ArticleEditInput!, articleId: String!): ArticleType!
  updateBox(data: BoxUpdateInput!): BoxType!
  updateCategory(category: CategoryEditInput!): CategoryType!
}

type PictureType {
  author: UserType!
  createdAt: DateTime!
  description: String!
  id: ID!
  images: [ImageType]!
  title: String!
  updatedAt: DateTime!
}

type PlaylistStreamingType {
  plateform: String!
  playlists: [PlaylistsType!]!
}

type PlaylistYoutubeType {
  title: String!
  year: String!
  youtubeId: String!
}

type PlaylistsType {
  iframe: String!
  name: String!
}

type Query {
  article(id: ID!): ArticleType!
  articles(pagination: PaginationInput, published: Boolean!): [ArticleType!]
  box(id: String!): BoxType!
  boxes(pagination: PaginationInput): [BoxType!]!
  categories(pagination: PaginationInput): [CategoryType!]!
  category(id: ID!): CategoryType!
  helloWorld: String!
  menu(name: String!): MenuType!
  menus: [MenuType!]!
  myArticles(after: Int, before: Int, first: Int, last: Int, skip: Int): [ArticleType!]
  myComments: [CommentType!]!
  myLikes: [LikeType!]!
  myPictures(after: Int, before: Int, first: Int, last: Int, skip: Int): [PictureType!]
  myProfile: UserType!
  resource(id: ID!): ResourceType!
  resources(pagination: PaginationInput): [ResourceType!]!
  tags(pagination: PaginationInput): [TagType]
  users: [UserType!]!
}

type ResourceType {
  author: UserType!
  createdAt: DateTime!
  description: String!
  id: ID!
  title: String!
  updatedAt: DateTime!
  url: String!
}

type TagType {
  createdAt: DateTime
  id: ID
  updatedAt: DateTime
  value: String!
}

type UserType {
  articles: [ArticleType!]
  avatar: PictureType
  createdAt: DateTime!
  email: String!
  id: ID!
  login: String!
  role: Role!
  updatedAt: DateTime!
}

enum LikeEnum {
  DISLIKE
  FDP
  FUCK
  LIKE
}

enum Role {
  AIFEDESPAIX
  USER
}

input ArticleEditInput {
  categoryId: String
  content: String
  description: String
  published: Boolean
  tags: [String!]
  thumbnailId: String
  title: String
}

input ArticleInput {
  categoryId: String!
  content: String!
  description: String!
  tags: [TagInput!]!
  thumbnailId: String!
  title: String!
}

input AudioInput {
  file: Upload!
  slice: SliceInput!
}

input BoxInput {
  description: String!
  soundId: String!
  tags: [String]!
  thumbnailId: String!
  title: String!
}

input BoxUpdateInput {
  description: String
  tags: [String]
  thumbnailId: String
  title: String
}

input CategoryEditInput {
  description: String
  name: String
  pictureId: ID
}

input CategoryInput {
  description: String!
  name: String!
  pictureId: ID!
}

input CommentInput {
  comment: String!
  parent: ID
}

input LoginInput {
  login: String!
  password: String!
}

input MenuInput {
  name: String!
}

input MenuItemInput {
  icon: String!
  name: String!
  routerLink: String!
}

input PaginationInput {
  after: String
  before: String
  first: Int
  last: Int
  skip: Int
}

input PictureCreateInput {
  connect: [ID!]
  create: [ResourceInput!]
}

input PictureInput {
  description: String!
  title: String!
}

input RegisterInput {
  email: String!
  login: String!
  password: String!
}

input ResourceAudioInput {
  audio: AudioInput!
  resource: ResourceInput!
}

input ResourceInput {
  description: String!
  title: String!
}

input SliceInput {
  from: Float!
  to: Float!
}

input TagInput {
  id: ID
  value: String!
}

input UserEditInput {
  avatarId: ID
}


"Date custom scalar type"
scalar DateTime

"Upload custom scalar type"
scalar Upload
